package wtf.l4j.impl.modules.exploit;

import de.florianmichael.dietrichevents2.DietrichEvents2;
import net.minecraft.network.packet.Packet;
import net.minecraft.network.packet.c2s.play.*;
import wtf.l4j.api.event.PacketListener;
import wtf.l4j.api.event.Type;
import wtf.l4j.api.module.Category;
import wtf.l4j.api.module.Module;
import wtf.l4j.api.module.ModuleInfo;
import wtf.l4j.api.module.option.options.OptionBoolean;

@ModuleInfo(name = "PacketCanceller", desc = "Cancels Packets", category = Category.EXPLOIT)
public class PacketCanceller extends Module implements PacketListener {

    private OptionBoolean acknowledgeChunks = new OptionBoolean("AcknowledgeChunks", true);
    private OptionBoolean acknowledgeReconfiguration = new OptionBoolean("AcknowledgeReconfiguration", true);
    private OptionBoolean advancementTab = new OptionBoolean("AdvancementTab", true);
    private OptionBoolean boatPaddleState = new OptionBoolean("BoatPaddleState", true);
    private OptionBoolean bookUpdate = new OptionBoolean("BookUpdate", true);
    private OptionBoolean buttonClick = new OptionBoolean("ButtonClick", true);
    private OptionBoolean chatMessage = new OptionBoolean("ChatMessage", true);
    private OptionBoolean clickSlot = new OptionBoolean("ClickSlot", true);
    private OptionBoolean clientCommand = new OptionBoolean("ClientCommand", true);
    private OptionBoolean clientStatus = new OptionBoolean("ClientStatus", true);
    private OptionBoolean closeHandledScreen = new OptionBoolean("CloseHandledScreen", true);
    private OptionBoolean commandExecution = new OptionBoolean("CommandExecution", true);
    private OptionBoolean craftRequest = new OptionBoolean("CraftRequest", true);
    private OptionBoolean creativeInventoryAction = new OptionBoolean("CreativeInventoryAction", true);
    private OptionBoolean handSwing = new OptionBoolean("HandSwing", true);
    private OptionBoolean jigsawGenerating = new OptionBoolean("JigsawGenerating", true);
    private OptionBoolean messageAcknowledgment = new OptionBoolean("MessageAcknowledgment", true);
    private OptionBoolean pickFromInventory = new OptionBoolean("PickFromInventory", true);
    private OptionBoolean playerInput = new OptionBoolean("PlayerInput", true);
    private OptionBoolean playerSession = new OptionBoolean("PlayerSession", true);
    private OptionBoolean queryBlockNbt = new OptionBoolean("QueryBlockNbt", true);
    private OptionBoolean queryEntityNbt = new OptionBoolean("QueryEntityNbt", true);
    private OptionBoolean recipeBookData = new OptionBoolean("RecipeBookData", true);
    private OptionBoolean recipeCategoryOptions = new OptionBoolean("RecipeCategoryOptions", true);
    private OptionBoolean renameItem = new OptionBoolean("RenameItem", true);
    private OptionBoolean requestCommandCompletions = new OptionBoolean("RequestCommandCompletions", true);
    private OptionBoolean selectMerchantTrade = new OptionBoolean("SelectMerchantTrade", true);
    private OptionBoolean slotChangedState = new OptionBoolean("SlotChangedState", true);
    private OptionBoolean spectatorTeleport = new OptionBoolean("SpectatorTeleport", true);
    private OptionBoolean teleportConfirm = new OptionBoolean("TeleportConfirm", true);
    private OptionBoolean updateBeacon = new OptionBoolean("UpdateBeacon", true);
    private OptionBoolean updateCommandBlock = new OptionBoolean("UpdateCommandBlock", true);
    private OptionBoolean updateCommandBlockMinecart = new OptionBoolean("UpdateCommandBlockMinecart", true);
    private OptionBoolean updateDifficulty = new OptionBoolean("UpdateDifficulty", true);
    private OptionBoolean updateDifficultyLock = new OptionBoolean("UpdateDifficultyLock", true);
    private OptionBoolean updateJigsaw = new OptionBoolean("UpdateJigsaw", true);
    private OptionBoolean updatePlayerAbilities = new OptionBoolean("UpdatePlayerAbilities", true);
    private OptionBoolean updateSelectedSlot = new OptionBoolean("UpdateSelectedSlot", true);
    private OptionBoolean updateSign = new OptionBoolean("UpdateSign", true);
    private OptionBoolean updateStructureBlock = new OptionBoolean("UpdateStructureBlock", true);

    public PacketCanceller() {
        addOptions(
                acknowledgeChunks, acknowledgeReconfiguration, advancementTab,
                boatPaddleState, bookUpdate, buttonClick, chatMessage, clickSlot,
                clientCommand, clientStatus, closeHandledScreen, commandExecution,
                craftRequest, creativeInventoryAction, handSwing, jigsawGenerating,
                messageAcknowledgment, pickFromInventory, playerInput, playerSession,
                queryBlockNbt, queryEntityNbt, recipeBookData, recipeCategoryOptions,
                renameItem, requestCommandCompletions, selectMerchantTrade,
                slotChangedState, spectatorTeleport, teleportConfirm, updateBeacon,
                updateCommandBlock, updateCommandBlockMinecart, updateDifficulty,
                updateDifficultyLock, updateJigsaw, updatePlayerAbilities,
                updateSelectedSlot, updateSign, updateStructureBlock
        );
    }

    @Override
    public void onEnable() {
        DietrichEvents2.global().subscribe(PacketEvent.ID, this);
        super.onEnable();
    }

    @Override
    public void onDisable() {
        DietrichEvents2.global().unsubscribe(PacketEvent.ID, this);
        super.onDisable();
    }

    @Override
    public void onPacket(PacketEvent packetEvent) {
        if (packetEvent.getType() == Type.OUTGOING && shouldCancel(packetEvent.getPacket())) {
            packetEvent.cancel();
        }
    }

    private boolean shouldCancel(Packet<?> packet) {
        if (packet instanceof AcknowledgeChunksC2SPacket) {
            return acknowledgeChunks.isEnabled();
        } else if (packet instanceof AcknowledgeReconfigurationC2SPacket) {
            return acknowledgeReconfiguration.isEnabled();
        } else if (packet instanceof AdvancementTabC2SPacket) {
            return advancementTab.isEnabled();
        } else if (packet instanceof BoatPaddleStateC2SPacket) {
            return boatPaddleState.isEnabled();
        } else if (packet instanceof BookUpdateC2SPacket) {
            return bookUpdate.isEnabled();
        } else if (packet instanceof ButtonClickC2SPacket) {
            return buttonClick.isEnabled();
        } else if (packet instanceof ChatMessageC2SPacket) {
            return chatMessage.isEnabled();
        } else if (packet instanceof ClickSlotC2SPacket) {
            return clickSlot.isEnabled();
        } else if (packet instanceof ClientCommandC2SPacket) {
            return clientCommand.isEnabled();
        } else if (packet instanceof ClientStatusC2SPacket) {
            return clientStatus.isEnabled();
        } else if (packet instanceof CloseHandledScreenC2SPacket) {
            return closeHandledScreen.isEnabled();
        } else if (packet instanceof CommandExecutionC2SPacket) {
            return commandExecution.isEnabled();
        } else if (packet instanceof CraftRequestC2SPacket) {
            return craftRequest.isEnabled();
        } else if (packet instanceof CreativeInventoryActionC2SPacket) {
            return creativeInventoryAction.isEnabled();
        } else if (packet instanceof HandSwingC2SPacket) {
            return handSwing.isEnabled();
        } else if (packet instanceof JigsawGeneratingC2SPacket) {
            return jigsawGenerating.isEnabled();
        } else if (packet instanceof MessageAcknowledgmentC2SPacket) {
            return messageAcknowledgment.isEnabled();
        } else if (packet instanceof PickFromInventoryC2SPacket) {
            return pickFromInventory.isEnabled();
        } else if (packet instanceof PlayerInputC2SPacket) {
            return playerInput.isEnabled();
        } else if (packet instanceof PlayerSessionC2SPacket) {
            return playerSession.isEnabled();
        } else if (packet instanceof QueryBlockNbtC2SPacket) {
            return queryBlockNbt.isEnabled();
        } else if (packet instanceof QueryEntityNbtC2SPacket) {
            return queryEntityNbt.isEnabled();
        } else if (packet instanceof RecipeBookDataC2SPacket) {
            return recipeBookData.isEnabled();
        } else if (packet instanceof RecipeCategoryOptionsC2SPacket) {
            return recipeCategoryOptions.isEnabled();
        } else if (packet instanceof RenameItemC2SPacket) {
            return renameItem.isEnabled();
        } else if (packet instanceof RequestCommandCompletionsC2SPacket) {
            return requestCommandCompletions.isEnabled();
        } else if (packet instanceof SelectMerchantTradeC2SPacket) {
            return selectMerchantTrade.isEnabled();
        } else if (packet instanceof SlotChangedStateC2SPacket) {
            return slotChangedState.isEnabled();
        } else if (packet instanceof SpectatorTeleportC2SPacket) {
            return spectatorTeleport.isEnabled();
        } else if (packet instanceof TeleportConfirmC2SPacket) {
            return teleportConfirm.isEnabled();
        } else if (packet instanceof UpdateBeaconC2SPacket) {
            return updateBeacon.isEnabled();
        } else if (packet instanceof UpdateCommandBlockC2SPacket) {
            return updateCommandBlock.isEnabled();
        } else if (packet instanceof UpdateCommandBlockMinecartC2SPacket) {
            return updateCommandBlockMinecart.isEnabled();
        } else if (packet instanceof UpdateDifficultyC2SPacket) {
            return updateDifficulty.isEnabled();
        } else if (packet instanceof UpdateDifficultyLockC2SPacket) {
            return updateDifficultyLock.isEnabled();
        } else if (packet instanceof UpdateJigsawC2SPacket) {
            return updateJigsaw.isEnabled();
        } else if (packet instanceof UpdatePlayerAbilitiesC2SPacket) {
            return updatePlayerAbilities.isEnabled();
        } else if (packet instanceof UpdateSelectedSlotC2SPacket) {
            return updateSelectedSlot.isEnabled();
        } else if (packet instanceof UpdateSignC2SPacket) {
            return updateSign.isEnabled();
        } else if (packet instanceof UpdateStructureBlockC2SPacket) {
            return updateStructureBlock.isEnabled();
        }
        return false;
    }
}
