package dev.l4j.currymod.client.module.modules.exploit;

import com.mojang.brigadier.suggestion.Suggestion;
import de.florianmichael.dietrichevents2.DietrichEvents2;
import dev.l4j.currymod.client.module.Module;
import dev.l4j.currymod.client.module.option.options.OptionNumber;
import dev.l4j.currymod.listener.IMessageReceiveListener;
import dev.l4j.currymod.listener.IPacketReceiveListener;
import dev.l4j.currymod.listener.ITickListener;
import dev.l4j.currymod.util.ChatUtils;
import net.minecraft.network.packet.c2s.play.RequestCommandCompletionsC2SPacket;
import net.minecraft.network.packet.s2c.play.CommandSuggestionsS2CPacket;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.function.Predicate;

@Module.Info(name = "AntiVanish", description = "Notifies when admin uses /vanish", category = Module.Category.EXPLOIT)
public class AntiVanish extends Module implements IPacketReceiveListener, IMessageReceiveListener, ITickListener {

    private final OptionNumber<Integer> interval = new OptionNumber<>("Interval", 100, 0, 300, 10);

    private final List<Integer> completionIDs = new ArrayList<>();
    private List<String> completionPlayerCache = new ArrayList<>();
    private final List<String> messageCache = new ArrayList<>();
    private final Random random = new Random();
    private int timer = 0;

    public AntiVanish() {
        addOptions(interval);
    }

    @Override
    protected void onEnable() {
        DietrichEvents2.global().subscribe(PacketReceiveEvent.ID, this);
        DietrichEvents2.global().subscribe(MessageReceiveEvent.ID, this);
        DietrichEvents2.global().subscribe(TickEvent.ID, this);

        completionIDs.clear();
        messageCache.clear();
    }

    @Override
    protected void onDisable() {
        DietrichEvents2.global().unsubscribe(PacketReceiveEvent.ID, this);
        DietrichEvents2.global().unsubscribe(MessageReceiveEvent.ID, this);
        DietrichEvents2.global().unsubscribe(TickEvent.ID, this);


        completionIDs.clear();
        messageCache.clear();
    }

    @Override
    public void onPacketReceive(PacketReceiveEvent event) {
        if (event.getPacket() instanceof CommandSuggestionsS2CPacket packet) {
            if (!completionIDs.contains(packet.id())) return;
            List<String> lastUsernames = completionPlayerCache.stream().toList();

            completionPlayerCache = packet.getSuggestions().getList().stream()
                    .map(Suggestion::getText)
                    .toList();

            if (lastUsernames.isEmpty()) return;

            Predicate<String> joinedOrQuit = playerName -> lastUsernames.contains(playerName) != completionPlayerCache.contains(playerName);

            for (String playerName : completionPlayerCache) {
                if (playerName.equals(mc.player.getName().getString())) continue;
                if (playerName.contains(" ")) continue;
                if (playerName.length() < 3 || playerName.length() > 16) continue;
                if (joinedOrQuit.test(playerName)) {
                    ChatUtils.sendClientMessage("Player joined: " + playerName);
                }
            }

            for (String playerName : lastUsernames) {
                if (playerName.equals(mc.player.getName().getString())) continue;
                if (playerName.contains(" ")) continue;
                if (playerName.length() < 3 || playerName.length() > 16) continue;
                if (joinedOrQuit.test(playerName)) {
                    ChatUtils.sendClientMessage("Player left: " + playerName);
                }
            }

            completionIDs.remove(Integer.valueOf(packet.id()));
            event.cancel();
        }
    }

    @Override
    public void onReceiveMessage(MessageReceiveEvent event) {
        messageCache.add(event.getMessage().getString());
    }

    @Override
    public void onTick() {
        timer++;
        if (timer < interval.getValue()) return;

        int id = random.nextInt(200);
        completionIDs.add(id);
        send(new RequestCommandCompletionsC2SPacket(id, "minecraft:msg "));

        timer = 0;
        messageCache.clear();
    }
}
